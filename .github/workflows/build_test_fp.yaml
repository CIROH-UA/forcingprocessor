name: Build and Test Forcing Processor with Datastream
on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Branch name to build from (leave empty to use current branch)'
        required: false
        default: ''
        type: string
      ds_tag:
        description: 'DS_TAG for datastream testing (leave empty for latest)'
        required: false
        default: ''
        type: string
  push:
    branches:
      - main
      - fp_workflow
      - trivy_scan
    paths:
      - 'docker/**' 
      - 'src/forcingprocessor/**'
      - '!src/forcingprocessor/README.md'
  pull_request:
    paths:
      - 'docker/**' 
      - 'src/forcingprocessor/**'
      - '!src/forcingprocessor/README.md'

permissions:
  contents: read   

jobs:
  build-test-docker-x86:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure AWS
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set region us-east-1

    # - name: Install packages for datastream
    #   run: |
    #     curl -L -O https://github.com/lynker-spatial/hfsubsetCLI/releases/download/v1.1.0/hfsubset-v1.1.0-linux_amd64.tar.gz && tar -xzvf hfsubset-v1.1.0-linux_amd64.tar.gz && sudo mv ./hfsubset /usr/bin/hfsubset && sudo apt-get update && sudo apt-get install git pip pigz -y        

    - name: Build docker containers
      run: |
        docker system prune -a
        ARCH=x86 TAG=latest-x86 docker compose -f docker/docker-compose.yml build forcingprocessor-deps
        TAG=latest-x86 docker compose -f docker/docker-compose.yml build forcingprocessor

    - name: clone ngen
      run: |
        git clone --single-branch --branch main --depth 1 https://github.com/CIROH-UA/ngen-datastream.git
  
    - name: Run Trivy vulnerability scan - deps
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: 'awiciroh/forcingprocessor-deps:latest-x86'

    - name: Run Trivy vulnerability scan - fp
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: 'awiciroh/forcingprocessor:latest-x86'
    - name: Prepare and test docker containers
      run: |
        cd ngen-datastream
        curl -L -O https://ngen-datastream.s3.us-east-2.amazonaws.com/palisade.gpkg
        if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ inputs.ds_tag }}" ]; then
          DS_TAG="${{ inputs.ds_tag }}-x86"
          echo "Using manual input DS_TAG: $DS_TAG"
        else
          DS_TAG="latest-x86"
          echo "Using default DS_TAG: $DS_TAG"
        fi
        echo $DS_TAG
        export DS_TAG=$DS_TAG FP_TAG=latest-x86 && ./scripts/datastream -s 202006200100 -e 202006200200 -C NWM_RETRO_V3 -d $(pwd)/data/datastream_test -g $(pwd)/palisade.gpkg -R $(pwd)/configs/ngen/realization_sloth_nom_cfe_pet.json -n 4



  build-test-docker-arm:
    needs: [build-test-docker-x86]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        
      - name: Configure AWS
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region us-east-1

      - name: clone ngen
        run: |
          git clone --single-branch --branch main --depth 1 https://github.com/CIROH-UA/ngen-datastream.git
              
      - name: Prepare execution config with branch
        run: |
          # Determine the branch name
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ inputs.branch_name }}" ]; then
            BRANCH_NAME="${{ inputs.branch_name }}"
            echo "Using manual input branch: $BRANCH_NAME"
          else
            BRANCH_NAME="${{ github.ref_name }}"
            echo "Using current branch: $BRANCH_NAME"
          fi
          # Replace ${BRANCH_NAME} with actual branch name in the file
          cd $GITHUB_WORKSPACE/.github/executions
          sed -i "s#\${BRANCH_NAME}#$BRANCH_NAME#g" test_execution_gp_arm_docker_buildNtester.json
          cat test_execution_gp_arm_docker_buildNtester.json

          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ inputs.ds_tag }}" ]; then
            DS_TAG="${{ inputs.ds_tag }}-arm64"
            echo "Using manual input branch: $DS_TAG"
          else
            DS_TAG="latest-arm64"
            echo "Using DS TAG: $DS_TAG"
          fi
          
          # Replace ${DS_TAG} with actual DS_TAG in the file
          cd $GITHUB_WORKSPACE/.github/executions
          sed -i "s/\${DS_TAG}/$DS_TAG/g" test_execution_gp_arm_docker_buildNtester.json
          cat test_execution_gp_arm_docker_buildNtester.json


      - name: Build AWS Infra
        run: |
          cd $GITHUB_WORKSPACE/ngen-datastream/research_datastream/terraform
          terraform init
          terraform validate
          ../scripts/import_resources.sh ./test/variables_gitactions_arm.tfvars
          terraform apply -var-file=./test/variables_gitactions_arm.tfvars -auto-approve
          sleep 60
          
      - name: Set permissions
        run: |
          cd $GITHUB_WORKSPACE/ngen-datastream/research_datastream/terraform
          aws iam attach-role-policy --role-name datastream_ec2_role_github_actions_arm --policy-arn arn:aws:iam::aws:policy/SecretsManagerReadWrite
          aws secretsmanager put-resource-policy --secret-id docker_awiciroh_creds --resource-policy file://test/secret-policy.json --block-public-policy --region us-east-1
          if ! aws ec2 describe-key-pairs --key-names "actions_key_arm" --query 'KeyPairs[0].KeyName' --output text 2>/dev/null; then aws ec2 create-key-pair --key-name "actions_key_arm" --query 'KeyName' --output text && echo "Key pair 'actions_key_arm' created in AWS"; else echo "Key pair 'actions_key_arm' already exists"; fi
          sleep 60
      
      - name: Build and Test arm docker containers with AWS infra
        run: |
          cat $GITHUB_WORKSPACE/.github/executions/test_execution_gp_arm_docker_buildNtester.json
          cp $GITHUB_WORKSPACE/.github/executions/test_execution_gp_arm_docker_buildNtester.json $GITHUB_WORKSPACE/ngen-datastream/research_datastream/terraform/test/execution_gp_arm_docker_buildNtester.json
          cd $GITHUB_WORKSPACE/ngen-datastream/research_datastream/terraform
          execution_arn=$(aws stepfunctions start-execution --state-machine-arn $(cat ./sm_ARN.txt) --name docker_builder_$(env TZ=US/Eastern date +'%Y%m%d%H%M%S') --input "file://test/execution_gp_arm_docker_buildNtester.json" --region us-east-1 --query 'executionArn' --output text); echo "Execution ARN: $execution_arn"; status="RUNNING"; while [ "$status" != "SUCCEEDED" ]; do status=$(aws stepfunctions describe-execution --execution-arn "$execution_arn" --region us-east-1 --query 'status' --output text); echo "Current status: $status"; if [ "$status" == "FAILED" ]; then echo "State machine execution failed!"; exit 1; fi; sleep 5; done; echo "State machine execution succeeded!"
      
      - name: Tear down infra
        if: always()
        run: |
          cd $GITHUB_WORKSPACE/ngen-datastream/research_datastream/terraform
          terraform destroy -var-file=./test/variables_gitactions_arm.tfvars -auto-approve
          sleep 30
